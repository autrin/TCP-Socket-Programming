// popen() (from the C standard library)
The popen() function opens a process by creating a pipe, forking, and invoking the shell. 
I can use it to run the uptime command and capture its output in your server program.

FILE *fp;
char output[1024];

fp = popen("uptime", "r");
if (fp == NULL) {
    printf("Failed to run command\n");
    exit(1);
}

while (fgets(output, sizeof(output)-1, fp) != NULL) {
    printf("%s", output);
}

pclose(fp);


//system() with Redirection
I can use the system() function to execute a command, but to capture the output, 
I can redirect the result to a file and then read from the file.
system("uptime > output.txt");

FILE *file = fopen("output.txt", "r");
char line[256];

while (fgets(line, sizeof(line), file)) {
    printf("%s", line);
}

fclose(file);


Server-Side (ruptimeServer.c)
Create a TCP socket using socket().
Bind the socket to an IP address and port using bind().
Listen for incoming connections using listen().
Accept a connection from the client using accept().
Run the uptime command, capture the output (using one of the approaches), and send it to the client using send().
Close the connection when done.

Client-Side (ruptimeClient.c)
Create a TCP socket using socket().
Connect to the server using connect() and specify the serverâ€™s IP and port.
Receive the uptime information from the server using recv().
Display the information and close the connection.